-- Top Level
 
entity main is
	port(Ai, Bi: in bit_vector(4 downto 0);--Entradas 4 Bits
			Bin : in BIT; -- Borrow de entrada
			Display1, Display2, Display3: out bit_vector(13 downto 0));-- Salida 14 Bits, 3 Displays de 7 segmentos (Unidades, decenas y borrow)
end entity;


architecture structural of main is
	Signal Sfaux: bit_vector(4 downto 0);-- SeÃ±al de salida auxiliar
	Signal Sr: bit_vector(5 downto 0); --Salida del restador

	component rest4bit is
	port(A, B: in bit_vector(3 downto 0);-- 4 entradas
			Bin: in BIT;
			Sf: out bit_vector(4 downto 0));-- 5 salidas (1 borrow y 4 de resultado)
	end component rest4bit;
	
	component decoBCD is
    port (
        salidaBCD : out bit_vector (4 downto 0);
        entradaBCD : in bit_vector (3 downto 0)
    );
	end component decoBCD;
	
	component BCD7seg is
    port (
        salida : out bit_vector (6 downto 0);
        entrada : in bit_vector (3 downto 0)
    );
	end component BCD7seg;


   begin process (Sfaux)
        variable auxVectOutDisplay : bit_vector (6 downto 0);
		  variable auxVectOut : bit_vector (4 downto 0);
		  variable auxVectUnidades : bit_vector (3 downto 0);
		  variable auxVectDecenas : bit_vector (3 downto 0);
    begin
			-- negativo
        if Sfaux(4) == "1" then auxVectOutDisplay := "1111110";
			--positivo
        else auxVectOutDisplay := "1111111";
        end if;
		  
	 end process;
	 
	 	Sfauxmap: rest4bit
		port map(sf=>sfaux);
	
		rest4: rest4bit
		--OJO CON EL BIN = 1
			port map(A=>Ai,B=>Bi,Bin=>'0',Sf=>Sr);
		decoBCDD: decoBCD
			port map(entradaBCD=>Sr,salidaBCD=>auxVectOut);
			
		auxVectUnidades <= auxVectOut(3) + auxVectOut(2) + auxVectOut(1) + auxVectOut(0);
		auxVectDecenas <= "000" + auxVectOut(4);
		
		-- (F, G, H, I)
		BCD7seg1: BCD7seg
			port map(entrada=>auxVectUnidades,salida=>Display1);
		-- (0, 0, 0, E)
		BCD7seg2: BCD7seg
			port map(entrada=>auxVectDecenas,salida=>Display2);
		-- (0, 0, 0, BorrowOut)
		BCD7seg3: BCD7seg
			port map(entrada=>auxVectOutDisplay,salida=>Display3);
		

	
	
end structural;